
# Replication bit

# Load packages
library(foreign)
library(stargazer)
library(tidyverse)
library(Hmisc)
library(readstata13)
library(haven)
library(texreg)
library(xtable)
library(knitr)
library(vtable)
library(plm)
library(dplyr)
library(magrittr)

# Set directory
setwd("/Users/yangshuya/Desktop/Jasmine Yang/PhD/Econometrics 2/Replication/Replication/data")

# Starting by looking at the yearly-obs data for summary characteristics
DF <- read.dta13("yearly-obs.dta")

order(DF$fips, DF$year)

# First look at data
head(DF)
summary(DF$repsharey)
summary(DF)

########## Creating summary statistics table (table 1) ##########

# Convert data frame to panel data frame
pdata <- pdata.frame(DF, index = c("fips", "year"))

DF_sum <- c("repshare", "turnout", "popsd", "capital_state", "airport", 
            "lnincome", "poverty", "gini", "racialhhi", "mentalhealth", 
            "pop15t39", "nevermarried", "sc", "lnhom_gun", "lnsui_gun", 
            "lncrime_violent", "lncrime_proprty", "mse", "failmse")

sumdata <- pdata[DF_sum]

labs <- c("Republican share", "Turnout", 
          "Population (standardized)", "State capitol",
          "Major city", "Log (median HH income)", 
          "Poverty rate","Inequality (Gini Index)", 
          "Racial diversity HHI", 
          "Proportion with mental issues", 
          "Population 15 to 39 years", "Single",
          "College dropouts", "Log (homicides by gun)", 
          "Log (suicides by Gun)","Log (violent crime)",
          "Log (property crime)", "Mass shooting", "Failed mass shooting")

st(sumdata, add.median=TRUE, labels=labs, 
   digits = 2, fixed.digits = FALSE, numformat = NA, out="latex", 
   title='Summary Statistics')

########## County characteristics (table 2) ##########
# Strategy 1: Checking if counties with/without mass shootings and counties with
# successful vs. failed mass shootings are different in observable
# characteristics

# Creating vector of variable names to create lags for
var_names <- c("repshare", "turnout", "capital_state", "lnincome", "poverty", 
               "gini", "racialhhi", "mentalhealth", "pop15t39", "nevermarried", "sc", 
               "lnhom_gun", "lnsui_gun", "lncrime_violent", "lncrime_proprty")

# Generate lagged variables for each variable in var_names
for (var_name in var_names) {
  DF[[paste0(var_name, "_lag1")]] <- c(NA, DF[[var_name]][-nrow(DF)])
}

# Regress the lagged variables on ms and popsd
# define variables to lag and regress
vars_to_lag <- c("repshare_lag1", "turnout_lag1", "capital_state_lag1", "lnincome_lag1", "poverty_lag1", 
                 "gini_lag1", "racialhhi_lag1", "mentalhealth_lag1", "pop15t39_lag1", "nevermarried_lag1", "sc_lag1", 
                 "lnhom_gun_lag1", "lnsui_gun_lag1", "lncrime_violent_lag1", "lncrime_proprty_lag1")

indep_vars <- c("ms", "popsd")

# create empty list to store regression results
reg_results <- list()

# Strategy 1 regression

for (var_name in vars_to_lag) {
  
 reg <- plm(as.formula(paste0(var_name, " ~ ", paste(indep_vars, collapse="+"))), 
             data = DF, subset = mse == 0 | ms == 1, index = "fips", 
             model = "random", effect = "twoways", cluster = "group")
  
  reg_results[[var_name]] <- reg
  
}

print(reg_results)

# Export results to regression table using stargazer
# Below code to export regression table should work but it does not flip!

stargazer(reg_results, type = "latex", header = FALSE, title = "County Characteristics",
          column.labels = c("Republican share", "Turnout", 
                            "State capitol",
                            "Log (median HH income)", 
                            "Poverty rate","Inequality (Gini Index)", 
                            "Racial diversity HHI", 
                            "Proportion with mental issues", 
                            "Population 15 to 39 years", "Single",
                            "College dropouts", "Log (homicides by gun)", 
                            "Log (suicides by Gun)","Log (violent crime)",
                            "Log (property crime)"), 
          row.labels = c("Constant", "MS", "Population"),
          flip = TRUE)

# Strategy 2 regression

########## Parallel trends assumption ##########
# Test for parallel trends using an interaction term of time and treatment
# Strategy 1

model <- lm(repshare ~ ms*year, data = DF2)
summary(model)

# P-value for the interaction term is insignificant (0.411), parallel trends assumption is met

# Strategy 2
model <- lm(repshare ~ successful*year, data = DF3)
summary(model)

# P-value for the interaction term is insignificant (0.361), parallel trends assumption is met

# Still not sure how to graph it
# Below are the two methods that I've tried, I don't think either works

# Create a scatterplot of the outcome variable by time and treatment
library(ggplot2)

ggplot(data = DF2, aes(x = year, y = repshare, color = mspost)) + 
  geom_point() + 
  geom_smooth(method = "lm", se = FALSE)

ggplot(DF2_pre, aes(x = year, y = repshare, color = as.factor(mspost))) +
  geom_point() +
  geom_smooth(data = DF2_treat, method = "lm", se = FALSE) +
  geom_smooth(data = DF2_control, method = "lm", se = FALSE)

########## Main results (table 4) ##########
# Strategy 1
# Sample: all county-year observations (15,570)
# Load data into dataframe 'DF2'

DF2 <- read.dta13("pres-elec.dta")

# Convert 'county' and 'year' variables to factor
DF2$county <- as.factor(DF2$county)
DF2$year <- as.factor(DF2$year)

# Define formula for regression
formula <- repshare ~ mspost

# Column 1
# Create plm model with fixed effects for 'county' and 'year' and clustered standard errors by 'state'
model <- plm(formula, data = DF2, index = c("county", "year"), model = "within", 
             effect = "twoways", cluster = "state")
             
print(model)

# Coefficients:
#  mspost 
#-0.06167 
# Consistent with author result

# Column 2
# Create fixed effect regression model that controls for population and flexible population trends

# Create the interaction term

DF2$c.popsd.year <- DF2$popsd * DF2$year

# Estimate the fixed effects model with c.popsd.year as an additional control

formula <- repshare ~ mspost + c.popsd.year

model <- plm(formula, data = DF2, index = c("county", "year"), model = "within", 
             effect = "twoways", cluster = "state")

print(model)

#Coefficients:
#      mspost c.popsd.year 
#  -0.0362091   -0.0066583 
# Consistent with author result

# Column 3
# Include state-year fixed effects

formula <- repshare ~ mspost + c.popsd.year

model <- plm(formula, data = DF2, index = c("county", "stateyear"), model = "within", 
             effect = "twoways", cluster = "state")
             
print(model)

#Coefficients:
#      mspost c.popsd.year 
#  -0.0271556   -0.0053293 
# Consistent with author result

# Column 4
# equation (2) and weight observations by county population

formula <- repshare ~ mspost + c.popsd.year

weights <- DF2$pop

model <- plm(formula, data = DF2, index = c("county", "year"), model = "within", 
             effect = "twoways", cluster = "state",
             weights = weights)

print(model)

#Coefficients:
#      mspost c.popsd.year 
#  -0.0315359   -0.0074837 

# Column 5
# equation (3) and weight observations by county population

formula <- repshare ~ mspost + c.popsd.year

weights <- DF2$pop

model <- plm(formula, data = DF2, index = c("county", "stateyear"), model = "within", 
             effect = "twoways", cluster = "state",
             weights = weights)

print(model)

#Coefficients:
#      mspost c.popsd.year 
#   -0.026269    -0.006539 

# Coefficient sizes slightly different from author results in columns 4 and 5

# Strategy 2
# Sample: successful and failed mass shootings
# Load data into dataframe 'DF3'

DF3 <- read.dta13("pres-elec-succfail.dta")

# Check for missing values
sum(is.na(DF3$popsd))  # Check for missing values in popsd
sum(is.na(DF3$year))   # Check for missing values in year
# No missing value found

# Column 1

formula <- repshare ~ successful + postattack

model <- plm(repshare ~ successful + postattack, 
             data = subset(DF3, mse == 1 | failmse == 1),
             index = c("county", "year"), model = "within", 
             effect = "twoways", cluster = "state")

print(model)

#Coefficients:
#successful postattack 
#-0.0345958  0.0091828 
# Consistent with author result

# Column 2
# First generate interaction term

DF3$c.popsd.year <- DF3$popsd * DF3$year

formula <- repshare ~ successful + postattack + c.popsd.year

model <- plm(formula, data = DF3,
             index = c("county", "year"), model = "within", 
             effect = "twoways", cluster = "state")

print(model)

#Coefficients:
#  successful   postattack c.popsd.year 
# -3.2590e-02   6.9504e-03  -3.6417e-05 

# Column 3
# Including state-year fixed effects

formula <- repshare ~ successful + postattack + c.popsd.year

model <- plm(formula, data = subset(DF3, mse == 1 | failmse == 1), 
             index = c("county", "stateyear"), model = "within", 
             effect = "twoways", cluster = "state")

print(model)

#Coefficients:
#  successful   postattack c.popsd.year 
# -1.9373e-02  -7.0745e-04  -3.4467e-05 

# Column 4
# equation 2 weighted by county population

formula <- repshare ~ successful + postattack + c.popsd.year

weights <- DF3$pop

model <- plm(formula, data = DF3, index = c("county", "year"), model = "within", 
             effect = "twoways", cluster = "state",
             weights = weights)

print(model)

#Coefficients:
#  successful   postattack c.popsd.year 
# -2.3299e-02  -5.8868e-03  -4.4138e-05 

# Column 5
# equation 3 weighted by county population
# again, why didn't he use the subset here?

formula <- repshare ~ successful + postattack + c.popsd.year

weights <- DF3$pop

model <- plm(formula, data = DF3, index = c("county", "stateyear"), 
             model = "within", effect = "twoways", cluster = "state",
             weights = weights)

print(model)

#Coefficients:
#  successful   postattack c.popsd.year 
# -1.4953e-02  -4.1177e-03  -3.9094e-05 


